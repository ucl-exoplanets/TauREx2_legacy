[General]
#verbose or not
verbose = True
verbose_all_threads = False


#use c++ path_integral version for transmission
#True: c++ version, False: python version
trans_cpp = True

#manually set wavelength range (if False, range taken from input data)
manual_waverange = False


#short wavelength cut-off (in microns) if manual_waverange = True
wavemin = 0.4

#long wavelength cut-off (in microns) if manual_waverange = True
wavemax = 20.0

#resolution of internal model runs (R)
spec_res = 1000

# use wavelength grid of cross sections for internal model (override spec_res)
abs_wavegrid = False

#specturm type (emission/transmission), for create_spectrum.py and create_grid.py
type = transmission

#recompile cpp code
compile_cpp = False

[Input]
#Observed spectrum to be fitted (three columns: wavelength (micron), (Rp/R*)^2, error
spectrum_file = False

# use bin widths from observed spectrum (bin width provided as a fourth column in spectrum_file)
use_spectrum_bins = False


#use T-P profile and mixing ratios ATM file
use_ATMfile = False

#file containing pre-determined T-P profile and mixing ratios
atm_file = Input/profile.atm

# T profile file todo temporary param
use_TP_file = None
TP_file = None

#Path of ExoMol cross section files folder
abs_path = Input/crosssections_10wno_log/

# dnu in abs cross sections
abs_dnu = 10

use_P_broadening = False
abs_path_P = Input/crosssections_pressure/

#run ExoMol cross section conversion from wavenumbers to microns
convert2microns = True

#files containing absorption cores-sections
#you can specify several file names separated by commas
#WARNING: parameter is legacy input. Not used by code, define abs_path and planet_molec parameters instead.
__legacy__abs_files = h2o_1500K.abs

#temperature grid resolution (K)
tempres = 100

#pressure grid resolution (bar)
presres = 0.1

#Path to Phoenix/Atlas stellar models (required by emission code)
star_path = Input/star_spectra

#include varying stellar radii file. True/False
include_rad = False

#file from which to read stellar radius R*(lambda)
rad_file = Input/rad_star.rad

#include H2-H2 collision induced absorption. True/False
include_cia = False

#file from which to read CIA coefficients
cia_file = Input/h2_h2_1000K.cia

# rebuild Rayleigh scattering cross sections
create_sigma_rayleigh = False

[Output]
#path for output files
path = Output/

#output file prefix
file_prefix =

#save internal model to file. Useful for when only creating transmission/emisison model
dump_internal = False

#internal model name save as
internal_name = internal_model.dat

#save plots to .pdf
save_plots = True

#plotting contours onto densities in posterior plots
plot_contour = True

# posterior plots colour (matplotlib colormaps)
plot_colour = Blues

[Preselector]

#Run preselector module to automatically estimate
#number and types of molecules present in spectrum.
#If run, the following parameters will be automatically
#determined and overwritten by the pre-selector
# [Input]: atm_file, abs_path (overwritten by cross_path), abs_files
# [Input]: use_ATMfile = False,
# [Planet]: temp, molec, (mu not yet)
# [T-P profile]: num_gas
# not yet but soon: [Fitting]: T_up, T_low, X_up, X_low

#run preselector
run_pre = False

#Path of spectral library folder
speclib_path = Preselector/speclib/

#Path of PCA preselector .pkl file
pca_path = Preselector/

#(re)generate spectral library
generate_speclib = True

#restrict temperature range for cross-section lists
restrict_temp = True

#setting temperature range (K) if restrict_temp = True : low, high
temp_range = 800, 1600

#mixing ratios for which spectra are computed
mixing_ratio = 1e-5,1e-4,1e-3,1e-2

#(re)compute PCA preselector file
generate_pca = True

#masking threshold
mask_thres = 0.6

#force preselector to include following list of molecules
mol_force_on = True

#list of molecules to be added
#naming convention must be same as cross-section file, comma separated
mol_force = 12C-16O,1H2-16O


[Star]
#defines stellar specific (fixed or starting) parameters:

#Stellar radius (R_sun)
radius = 0.781

#Stellar temperature (K)
temp   = 4900


[Planet]
#defines planetary specific (fixed or starting) parameters:

#Planetary radius (R_jupiter)
radius = 1.138

#Planetary mass (M_jupiter)
mass = 1.138

#Orbital semi-major axis (AU)
sma = 0.03099

#Planetary bond albedo (0-1)
albedo = 0.2

#Planetary temperature (K)
temp = 1400

#molecular weight of atmosphere
mu = 2.3

#molecules considered
molecules = 1H2-16O, 12C-1H4, 12C-16O, 12C-16O2, 14N-1H3

#initial mixing ratios (starting point for minimisation)
#and used for model only mode (create_spectrum.py). Must have as
#many mixing ratios as molecules above. Comma separated list.
mixing_ratios = 2.0e-3, 2.0e-8, 2.0e-3, 2.0e-5, 2.0e-7

# spectrally-inactive gases
inactive_gases = He, H2

# mixing ratios of spectrally inactive gases
inactive_gases_X = 0.15, 0.85

#include cloud opacities. True/False
include_cld = False

#cloud refractive index (m) and particle size (a) in microns. Comma separated
cld_params = 1.5, 1.0

#cloud pressure in bar, lower and upper bounds. Comma separated
cld_pressure = 1.0e-3, 0.1

#file from which to read optical depths for extra opacities (e.g. clouds)
#parameter not in use but placeholder for implementation if needed
cld_file = Input/cloud1.cld

# include Ryleigh scattering opacities
include_Rayleigh = True

[T-P profile]
#let mixing ratios and T-P profile vary
#True: free parameters allowed and lower/upper limits taken from .atm,
#False: all fixed to input .atm file
var_atm = True

#thickness of atmosphere in number of atmospheric scale heights (if var_atm = True)
num_scaleheights = 20

#DEPRECATED, see atm_step_size
#number of atmospheric levels
atm_levels = 80

# altitude grid step size in km
atm_step_size = 50

#set maximum pressure level (if set variable) (Pa)
atm_max_pressure = 1e6

#set mixing ratios as variables
var_mix = True

#TP profile type to be selected (only sets for emission, tranmission = isothermal)
#available profiles are: isothermal, guillot, hybrid, 2point, 3point
profile_type = isothermal

#Correlation length of TP profile for Rodgers2000 and Hybrid 
corr_length = 5.0

[Fitting]
#defines general fittings parameters, independent of method

#fit transmission model
transmission = True

#fit emission model
emission     = False

#fit emission in 2 stage mode 
emission_stage2 = True

#lower and upper bounds for TP-profile hybrid alpha parameter 
hybrid_alpha_low  = 0.0 
hybrid_alpha_high = 1.0

# turn on/off free parameters. True means the parameter is fixed, False the parameter is fitted

# fix the inactive gases mixing ratios, defined in Planet > inactive_gases
fix_inactive = True
# fix the temperature (defined in Planet > temp. Not working if TP profile is not isothermal)
fix_temp = False
# fix the mean molecular weight (defined in Planet > mu. Careful: can be overidden by fit_couple_mu)
fix_mu = False
# fix radius at atm_max_pressure (defined in Planet > radius)
fix_radius = False
# fix maximum pressure at surface (defined in T-P Profile > atm_max_pressure). Fit is in log space
fix_P0 = False
# fix cloud parameters. Only working if Planet > include_cld is True
# clouds upper and lower pressure (defined in Planet > cld_pressure
fix_clouds_lower_P = True
fix_clouds_upper_P = True
# cloud particle refractive index (m) and particle size (a) (defined in Planet > cld_params)
fix_clouds_m = True
fix_clouds_a = True


# fit mixing ratios in log space
X_log = True

#Upper and lower bounds for inactive gases mixing ratios
X_inactive_up  = 1.0
X_inactive_low = 0.0

#Upper and lower bounds for absorbers mixing ratios. IMPORTANT: never set X_low to zero, as  take logs
X_up  = 1.0
X_low = 1.0e-8


#Upper and lower bounds for temperature (equilibrium +- value)
T_up  = 200
T_low = 200

#upper and lower bounds for mean molecular weight (in atomic mass units)
mu_up = 40
mu_low = 0

#Upper and lower bounds for planet radius (radius +- value), in RJUP
radius_up  = 0.2010
radius_low = 0.2210

#Upper and lower bounds for surface pressure
P0_up = 1.e8
P0_low = 1.e2

# cloud lower and upper pressure bounds ( in log(bar) ). Fit is in log space
clouds_lower_P_bounds = -5, -2
clouds_upper_P_bounds = -2, 0

# cloud refractive index and particle size (micron) bounds
clouds_m_bounds = 0.8, 1.2
clouds_a_bounds = 1.3, 1.7

# if True mu is not fitted, but derived from the bulk composition of the atmosphere + absorbers
# if False, mu is either fitted (if fix_mu = False) or kept fixed (see Planet > mu)
couple_mu = False

# centered log ratio transformation
clr_trans = False


[Downhill]
#defines parameters for minimisation

#run minimisation routine on data
run = False

#type of minimisation to use: Nelder-Mead, Powell, CG, BFGS, Newton-CG, L-BFGS-B, TNC, COBYLA, SLSQP, dogleg, trust-ncg
#see scipy.optimize.minimize documentation
type = L-BFGS-B

#Supply extra parameters using options parameter. See scipy docu
options = {‘verbose’:False}

[MCMC]
#defines MCMC specific parameters

#run MCMC analysis on data
run = False

#update data standard deviation from dynamic fit.
update_std = True


#MCMC number of total iterations
iter = 10000

#MCMC burn in period
burn = 1000

#MCMC thinning factor
thin = 1

#toggle verbose
verbose = True

#show progress bar
progressbar = True

[MultiNest]
#defines MultiNest specific parameters

#run Nested Sampling analysis on data
run = False

#resume from previous run
resume = True

#verbose
verbose = False

#sampling chains directory
nest_path = chains/

#sampling efficiency (parameter, ...)
sampling_eff = parameter

#number of live points
n_live_points = 1000

#maximum no. of iterations (0=inf)
max_iter = 0

#search for multiple modes
multimodes = True

#maximum number of modes
max_modes = 100

#run in constant efficiency mode
const_eff = False

#set log likelihood tolerance. If change is smaller, multinest will have converged
evidence_tolerance = 0.5
mode_tolerance = -1e90

#importance nested sampling
imp_sampling = False

# detect different modes in multinest output using clustering algorithm. It overrides detected modes if multimodes=True
cluster_analysis = False


[Housekeeping]
#lets you run an external script (py or sh) in subshell at
#the end of TauREx. Usefull to automatically transfer data or
#delete tmp files

#run housekeeping
run = False

#Name of script in TauREx base dir
script_name = transfer2home.py

#Save used parameter file to Output
save_used_params = True

