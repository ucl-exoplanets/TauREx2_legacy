[General]
#verbose or not 
verbose = True

#use c++ path_integral version for transmission
#True: c++ version, False: python version
trans_cpp = True

#manually set wavelength range (if False, range taken from input data)
manual_waverange = False

#short wavelength cut-off (in microns) if manual_waverange = True
wavemin = 0.5

#long wavelength cut-off (in microns) if manual_waverange = True
wavemax = 20.0

#resolution of internal model runs (R)
spec_res = 1000

#specturm type (emission/transmission), for create_spectrum.py 
type = transmission 


[Input]
#Observed spectrum to be fitted
spectrum_file = Input/observations/hotjupiter_r300_5e-5.dat

#use T-P profile and mixing ratios ATM file
use_ATMfile = False

#file containing pre-determined T-P profile and mixing ratios
atm_file = Input/profile.atm

#Path of ExoMol cross section files folder
abs_path = Input/crosssections/

#run ExoMol cross section conversion from wavenumbers to microns
convert2microns = False

#files containing absorption cores-sections 
#you can specify several file names separated by commas
#WARNING: parameter is legacy input. Not used by code, define abs_path and planet_molec parameters instead.
__legacy__abs_files = h2o_1500K.abs

#temperature grid resolution (K)
tempres = 1.0

#Path to Phoenix/Atlas stellar models (required by emission code)
star_path = Input/Star_spectra 

#include varying stellar radii file. True/False 
include_rad = False 

#file from which to read stellar radius R*(lambda)
rad_file = Input/rad_star.rad

#include H2-H2 collision induced absorption. True/False 
include_cia = False 

#file from which to read CIA coefficients
cia_file = Input/h2_h2_1000K.cia



[Output]
#path for output files
path = Output/

#output file prefix
file_prefix = test_

#save internal model to file. Useful for when only creating transmission/emisison model
dump_internal = False

#internal model name save as
internal_name = transmissionspec.dat

#save plots to .pdf 
save_plots = True


[Preselector]

#Run preselector module to automatically estimate
#number and types of molecules present in spectrum.
#If run, the following parameters will be automatically
#determined and overwritten by the pre-selector
# [Input]: atm_file, abs_path (overwritten by cross_path), abs_files
# [Input]: use_ATMfile = False,
# [Planet]: temp, molec, (mu not yet)
# [T-P profile]: num_gas
# not yet but soon: [Fitting]: T_up, T_low, X_up, X_low

#run preselector
run_pre = False

#Path of spectral library folder
speclib_path = Preselector/speclib/

#Path of PCA preselector .pkl file
pca_path = Preselector/

#(re)generate spectral library
generate_speclib = True

#restrict temperature range for cross-section lists
restrict_temp = True

#setting temperature range (K) if restrict_temp = True : low, high 
temp_range = 800, 1600

#mixing ratios for which spectra are computed
mixing_ratio = 1e-5,1e-4,1e-3,1e-2

#(re)compute PCA preselector file
generate_pca = True

#masking threshold
mask_thres = 0.6

#force preselector to include following list of molecules
mol_force_on = True

#list of molecules to be added
#naming convention must be same as cross-section file, comma separated 
mol_force = 12C-16O,1H2-16O


[Star]
#defines stellar specific (fixed or starting) parameters:

#Stellar radius (R_sun)
radius = 0.781

#Stellar temperature (K)
temp   = 4900



[Planet]
#defines planetary specific (fixed or starting) parameters:

#Planetary radius (R_jupiter)
radius = 1.138

#Planetary mass (M_jupiter)
mass = 1.138

#Orbital semi-major axis (AU)
sma = 0.03099

#Planetary bond albedo (0-1)
albedo = 0.2

#Planetary temperature (K)
temp = 1400

#molecular weight of atmosphere 
mu = 2.3

#molecules considered
molecules = 1H2-16O, 12C-1H4, 12C-16O, 12C-16O2, 14N-1H3

#initial mixing ratios (starting point for minimisation) 
#and used for model only mode (create_spectrum.py). Must have as
#many mixing ratios as molecules above. Comma separated list. 
mixing_ratios = 2.0e-3, 2.0e-8, 2.0e-3, 2.0e-5, 2.0e-7

#include cloud opacities. True/False 
include_cld = False

#cloud refractive index (m) and particle size (a) in microns. Comma separated
cld_params = 1.5, 1.0

#cloud pressure (in bar) lower and upper bounds. Comma separated
cld_pressure = 1.0e-3, 0.1

#file from which to read optical depths for extra opacities (e.g. clouds)
#parameter not in use but placeholder for implementation if needed
cld_file = Input/cloud1.cld


[T-P profile]
#let mixing ratios and T-P profile vary
#True: free parameters allowed and lower/upper limits taken from .atm, 
#False: all fixed to input .atm file
var_atm = True

#thickness of atmosphere in number of atmospheric scale heights (if var_atm = True)
num_scaleheights = 20

#number of atmospheric levels. 
#If var_atm = False, atm_levels is taken from .atm file
atm_levels = 40

#set temperature as variables
var_temp = True

#set pressure as variable
var_pres = True

#set maximum pressure level (if set variable) (Pa)
atm_max_pressure = 1e6

#set mixing ratios as variables
var_mix = True


[Fitting]
#defines general fittings parameters 
#independent of method

#fit transmission model
transmission = True

#fit emission model
emission     = False

#free parameters, temperature, abundance
param_free = 1,42 #currently not used. not sure whether should be implemented and in what form

#Upper and lower bounds for temperature (equilibrium +- value)
T_up  = 200
T_low = 200

#Upper and lower bounds for mixing ratios 
X_up  = 1e-2
X_low = 0.0


[Downhill]
#defines parameters for minimisation

#run minimisation routine on data
run = True

#type of minimisation to use: Nelder-Mead, Powell, CG, BFGS, Newton-CG, 
#L-BFGS-B, TNC, COBYLA, SLSQP, dogleg, trust-ncg
#see scipy.optimize.minimize documentation
type = L-BFGS-B

#Supply extra parameters using options parameter. See scipy docu
options = {‘verbose’:False}



[MCMC]
#defines MCMC specific parameters

#run MCMC analysis on data
run = False

#update data standard deviation from dynamic fit.
update_std = True


#MCMC number of total iterations
iter = 300

#MCMC burn in period 
burn = 10

#MCMC thinning factor
thin = 1


[MultiNest]
#defines MultiNest specific parameters

#run Nested Sampling analysis on data
run = False

#resume from previous run
resume = True

#verbose
verbose = True

#sampling chains directory
nest_path = chains/

#sampling efficiency (parameter, ...)
sampling_eff = parameter

#number of live points
n_live_points = 400

#maximum no. of iterations (0=inf)
max_iter = 0

#search for multiple modes 
multimodes = False

#maximum number of modes
max_modes = 100

#run in constant efficiency mode
const_eff = False

#importance nested sampling
imp_sampling = False



[NeuralNet]
#defines Neural Network specific parameters
