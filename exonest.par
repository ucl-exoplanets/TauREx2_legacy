[General]
#verbose or not 
verbose = True

#use c++ path_integral version for transmission
#True: c++ version, False: python version
trans_cpp = True



[Preselector]

#Run preselector module to automatically estimate
#number and types of molecules present in spectrum.
#If run, the following parameters will be automatically
#determined and overwritten by the pre-selector
# [Input]: atm_file, abs_path (overwritten by cross_path), abs_files
# [Input]: use_ATMfile = False,
# [Planet]: temp, molec, (mu not yet)
# [T-P profile]: num_gas
# not yet but soon: [Fitting]: T_up, T_low, X_up, X_low

#run preselector
run_pre = True

#Path of ExoMol cross section files folder
cross_path = test-code/crosssections/

#Path of spectral library folder
speclib_path = test-code/speclib/

#Path of PCA preselector .pkl file
pca_path = test-code/

#run ExoMol cross section conversion from wavenumbers to microns
convert2microns = False

#(re)generate spectral library
generate_speclib = False

#mixing ratios for which spectra are computed
mixing_ratio = 1e-6,1e-5,1e-4,1e-3

#(re)compute PCA preselector file
generate_pca = False




[Input]
#Observed spectrum to be fitted
spectrum_file = testspec2.txt

#use T-P profile and mixing ratios ATM file
use_ATMfile = False

#file containing pre-determined T-P profile and mixing ratios
atm_file = Input/profile.atm

#folder containing absorption cores-section files
abs_path = Input/exonest_abs/

#files containing absorption cores-sections 
#you can specify several file names separated by commas
abs_files = h2o_1500K.abs

#include varying stellar radii file. True/False 
include_rad = False 

#file from which to read stellar radius R*(lambda)
rad_file = Input/rad_star.rad

#include H2-H2 collision induced absorption. True/False 
include_cia = False 

#file from which to read CIA coefficients
cia_file = Input/h2_h2_1000K.cia

#include cloud opacities. True/False 
include_cld = False

#file from which to read optical depths for extra opacities (e.g. clouds)
cld_file = Input/cloud1.cld



[Output]
#path for output files
path = Output/

#output file prefix
file_prefix = test_




[Star]
#defines stellar specific (fixed or starting) parameters:

#Stellar radius (R_sun)
radius = 0.74

#Stellar temperature (K)
temp   = 5119



[Planet]
#defines planetary specific (fixed or starting) parameters:

#Planetary radius (R_jupiter)
radius = 0.213

#Orbital semi-major axis (AU)
sma = 0.08

#Planetary bond albedo (0-1)
albedo = 0.5

#Planetary surface gravity (ms^-2)
grav = 3.166

#Planetary temperature (K)
temp = 757

#molecular weight of atmosphere 
mu = 3.0

#molecules considered
molec = H20, CH4, CO2


[T-P profile]
#let mixing ratios and T-P profile vary
#True: free parameters allowed and lower/upper limits taken from .atm, 
#False: all fixed to input .atm file
var_atm = True

#thickness of atmosphere in number of atmospheric scale heights (if var_atm = True)
num_scaleheights = 22

#number of atmospheric levels. 
#If var_atm = False, atm_levels is taken from .atm file
atm_levels = 40

#number of gasses in atmosphere. 
#If var_atm = False, num_gas is taken from .atm file
num_gas = 1

#set temperature as variables
var_temp = True

#set pressure as variable
var_pres = True

#set maximum pressure level (if set variable) (Pa)
atm_max_pressure = 1e6

#set mixing ratios as variables
var_mix = True


[Fitting]
#defines general fittings parameters 
#independent of method

#resolution of model runs (R)
spec_res = 2000

#fit transmission model
transmission = True

#fit emission model
emission     = False

#free parameters, temperature, abundance
param_free = 1,42 #currently not used. not sure whether should be implemented and in what form

#Upper and lower bounds for temperature (equilibrium +- value)
T_up  = 500
T_low = 500

#Upper and lower bounds for mixing ratios 
X_up  = 1e-2
X_low = 0.0


[MCMC]
#defines MCMC specific parameters

#update data standard deviation from dynamic fit.
update_std = True


#MCMC number of total iterations
iter = 15000

#MCMC burn in period 
burn = 1000

#MCMC thinning factor
thin = 1


[MultiNest]
#defines MultiNest specific parameters

#resume from previous run
resume = False

#verbose
verbose = True

#sampling efficiency (parameter, ...)
sampling_eff = parameter

#number of live points
n_live_points = 1000

#maximum no. of iterations (0=inf)
max_iter = 0

#importance nested sampling
imp_sampling = False



[NeuralNet]
#defines Neural Network specific parameters



